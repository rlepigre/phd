\Include{Macros}
\Caml(
  open ProofTree
  open PMLVerbatim
  open Lang

  let vs a = <$ ⟦\f(a)⟧ $>
  let ss a = <$ ⟦\f(a)⟧^⊥ $>
  let ts a = <$ ⟦\f(a)⟧^{⊥⊥} $>
)
\Configure_math_macro{\v}{ syntax = string; }
\Configure_math_macro{\t}{ syntax = string; }
\Configure_math_macro{\s}{ syntax = string; }
\Configure_math_macro{\p}{ syntax = string; }
\Configure_math_macro{\subs}{ syntax = string; }
\Configure_math_macro{\vs}{ syntax = string; }
\Configure_math_macro{\ss}{ syntax = string; }
\Configure_math_macro{\ts}{ syntax = string; }


\begin{env}(fun env -> hyphenate_fr env)
Au cours des dernières années, les assistants à la preuves on fait des progrès
considérables et ont atteint un grand niveau de maturité. Ils ont permit la
certification de programmes complexes tels que des compilateurs et même des
systèmes d'exploitation. Néanmoins, l'utilisation d'un assistant de preuve
requiert des compétences techniques très particulières, qui sont très
éloignées de celles requises pour programmer de manière usuelle. Pour combler
cet écart, nous entendons concevoir un langage de programmation de style ML
supportant la preuve de programmes. Il combine au sein d'un même outil la
flexibilité de ML et le fin niveau de spécification offert par un assistant de
preuve. Autrement dit, le système peut être utilisé pour programmer de manière
fonctionnelle et fortement typée, tout en permettant l'obtention de nouvelles
garanties au besoin.

On étudie donc un langage en appel par valeurs dont le système de type étend
une logique d'ordre supérieur. Il comprend un type égalité (entre programmes
non typés), un type de fonctions dépendantes, la logique classique et du
sous-typage. La combinaison de l'appel par valeurs, des fonctions dépendantes
et de la logique classique est connu pour poser des problèmes de cohérence.
Pour s'assurer de la correction du système (cohérence logique et sûreté à
l'exécution), on propose un cadre théorique basé sur la réalisabilité
classique de Krivine. Le modèle repose sur une propriété essentielle qui lie
les différents niveaux d'interprétation des types d'une manière novatrice.

On démontre aussi l'expressivité de notre système en se basant sur son
implantation dans un prototype. Il peut être utilisé pour prouver des
propriétés de programmes standards tels que la fonction « map » sur les listes
,ou le tri par insertion.
\end{env}

-> Chapitre 1, introduction

\begin{env}(fun env -> hyphenate_fr env)
Depuis l'apparition des premiers ordinateurs, chaque génération de
programmeurs à du faire face au problème de la fiabilité du code. Les langages
statiquement typés tels que Java, Haskell, OCaml, Rust ou Scala ont attaqué ce
problème avec des vérifications statiques, au moment de la compilation, pour
détecter des programmes incorrects. Leur typage fort est particulièrement
utile quand plusieurs objets incompatibles doivent être manipulés au même
moment. Par exemple, un programme qui calcule une addition sur un booléen (ou
une fonction) est immédiatement rejeté. Durant les dernières années, les
avantages du typage statique ont même été reconnus au sein de la communauté
des langages dynamiquement typés. Des systèmes de vérification statique du
typage sont dorénavant disponibles pour Javascript \mcite(["Microsoft2012";
"Facebook2014"]) ou Python \cite("Lehtosalo2014").

Dans les trente dernières années, des progrès significatifs ont été fait dans
l'application de la théorie des types aux langages de programmation. La
correspondance de Curry-Howard, qui lie les systèmes de types des langages de
programmation fonctionnels à la logique mathématique, a été explorée dans deux
directions principales. D'un côté, les assistants à la preuve comme Coq ou
Agda sont basés sur des logiques très expressives \mcite(["Coquand1988";
"Martin-Löf1982"]). Pour montrer leur cohérence logique, les langages de
programmation sous-jacents doivent être restreints aux programmes qui peuvent
être montrés terminant. Ils interdisent donc les formes de récursion les plus
générales. De l'autre côté, les langages de programmation fonctionnelle comme
OCaml ou Haskell sont adaptés à la programmation, car ils n'imposent pas de
restriction sur la récursion.  Cependant, ils sont basés sur des logiques qui
ne sont pas cohérentes, ce qui implique qu'ils ne peuvent pas être utilisés
pour démontrer des formules mathématiques.

Le but de ce travail est de fournir un environnement uniforme au sein duquel
des programmes peuvent être écrits, spécifiés, et prouvés. L'idée est de
combiner un langage de programmation à la ML complet, avec un système de type
enrichi pour permettre la spécification de comportements calculatoires. Ce
langage peut donc être utilisé comme ML pour programmer en tirant profit d'un
typage statique fort, mais aussi comme un assistant à la preuve pour démontrer
des propriétés de programmes ML. L'uniformité du système permet, en outre, de
raffiner les programmes petit à petit, pour obtenir de plus en plus de
garanties. En particulier, il n'y a pas de distinction syntaxique entre les
programmes et les preuves dans le système. On peut donc mélanger preuves et
programmes durant la construction de preuves ou de programmes. Par exemples,
on peut utiliser des mécanismes de preuve au sein de programmes afin qu'ils
puissent porter des propriétés (par exemple, l'addition avec sa
commutativité). Les programmes peuvent aussi utiliser des mécanismes de preuve
pour éliminer du code mort (une portion de programme qui ne peut pas être
atteinte durant l'exécution).

Dans cette thèse, notre but premier est de mettre au point un système de type
pour un langage de programmation fonctionnelle, utilisable en pratique. Parmi
les nombreux choix techniques possibles, nous avons décidé de considérer un
langage en appel par valeur similaire à OCaml ou SML, ces derniers ayant fait
leurs preuves en terme d'efficacité et d'utilisation. Notre langage comporte
des variants polymorphes \cite("Garrigue1998") et des types enregistrements à
la SML, qui sont très pratiques pour encoder des types de données. Par
exemple, le type des listes peut être défini et utilisé de la manière
suivante.
### PML
type rec list<a> = [Nil ; Cons of {hd : a ; tl : list}]

val rec exists : ∀a, (a ⇒ bool) ⇒ list<a> ⇒ bool =
  fun pred l {
    case l {
      Nil     → false
      Cons[c] → if pred c.hd { true } else { exists pred c.tl }
    }
  }
###
Ici, la fonction polymorphe ##exists## prend comme paramètre un prédicat et
une liste, et elle indique si (au moins) un élément de la liste satisfait le
prédicat.

Le système présenté ici n'est pas seulement un langage de programmation, mais
aussi un assistant à la preuve, et en particulier à la preuve de programmes.
Son mécanisme de preuve est basé sur des types égalités de la forme ##t ≡ u##,
où ##t## et ##u## sont des programmes arbitraires du langage. Un tel type
égalité est habité par (ou contient) ##{}## (c'est à dire l'enregistrement
vide) si l'équivalence dénotée est vraie, et il est vide sinon. Les
équivalences sont gérées en utilisant une procédure partielle de décision, qui
est dirigée par la construction de programmes. Un contexte d'équations est
maintenu par l'algorithme de typage, afin de stocker les équivalences
supposées correctes durant la construction de la preuve de typage. Ce contexte
est étendu quand une nouvelle équation est apprise (par exemple, quand un
lemme est appliqué), et une équation est prouvée en cherchant une
contradiction (par exemple, quand deux variants différents sont supposés
égaux).

Pour illustrer le fonctionnement des preuves, nous allons considérer l'exemple
très simple des entiers naturels en représentation unaire (les nombres de
Peano). Leur type est donné ci-dessous, avec la fonction d'addition
correspondante, définie par récurrence sur son premier argument.
### PML
type rec nat = [Zero ; Succ of nat]

val rec add : nat ⇒ nat ⇒ nat =
  fun n m {
    case n { Zero → m | Succ[k] → Succ[add k m] }
  }
###
Comme premier exemple, nous allons montrer ##add Zero n ≡ n## pour tout ##n##.
Pour exprimer cette propriété, on utilise le type ##∀n:ι, add Zero n ≡ n##,
où ##ι## peut être vu comme l'ensemble de tous les programmes complètement
évalués. Cette énoncé peut ensuite être démontré comme suit.
### PML "examples/demo.pml"
val add_z_n : ∀n:ι, add Zero n ≡ n = {}
###
Ici, la preuve est immédiate (c'est à dire, ##{}##) comme ##add Zero n ≡ n##
se déduit directement de la définition de la fonction ##add##. Notez que cette
équivalence est vraie pour tout ##n##, qu'il corresponde à un élément de
##nat## ou pas. Par exemple, on peut montrer sans problème l'équivalence
##add Zero true ≡ true##.

Regardons maintenant l'énoncé ##∀n:ι, add n Zero ≡ n##. Bien qu'il soit très
similaire à ##add_z_n## en apparence, il ne peut pas être démontré.
En effet, la relation ##add n Zero ≡ n## n'est pas vraie quand ##n## n'est pas
un entier unaire. Dans ce cas, l'évaluation de ##add n Zero## produit une
erreur à l'exécution. En conséquence, on devra se reposer sur une forme de
quantification dont le domaine se limite aux entiers unaires. Ceci peut être
réalisé avec le type ##∀n∈nat, add n Zero ≡ n##, qui corresponds à une
fonction (dépendante) prenant en entrée un entier ##n##, et retournant une
preuve de ##add n Zero ≡ n##. Cette propriété peut ensuite être prouvée en
utilisant de l'induction (programme récursif) et une analyse par cas (filtrage
par motif).
### PML
val rec add_n_z : ∀n∈nat, add n Zero ≡ n =
  fun n {
    case n {
      Zero    → {}
      Succ[k] → let ih = add_n_z k; {}
    }
  }
###
Si ##n## est ##Zero##, alors on doit montrer ##add Zero Zero ≡ Zero##, qui
est immédiat par définition de ##add##. Dans le cas où ##n## est ##Succ[k]##
on doit montrer ##add Succ[k] Zero ≡ Succ[k]##. Par définition de ##add##,
cette équation se réduit en ##Succ[add k Zero] ≡ Succ[k]##. Il suffit donc de
montrer ##add k Zero ≡ k## en utilisant l'hypothèse d'induction
(##add_n_z k##).
\end{env}

-<

-> Chapitre 2, calcul non typé

\begin{env}(fun env -> hyphenate_fr env)
Dans ce chapitre, on introduit le langage de programmation qui sera utilisé
dans toute la suite de cette thèse. Sa sémantique opérationnelle est exprimée
à l'aide d'une machine abstraite, qui nous permettra de considérer des
opérations produisant des effets de bord. Comme tout langage de programmation
fonctionnelle, notre système est base sur le $λ$-calcul. Créé par Alonzo
Church dans les années trente, le $λ$-calcul \cite("Church1941") est un
formalisme permettant la représentation de fonctions calculables, et en
particulier de fonctions récursives. Comme l'a démontré Alan Turing, le
$λ$-calcul est un //modèle de calcul universel// \cite("Turing1937").

Les termes du $λ$-calcul (appelés $λ$-termes) sont construits à partir d'un
alphabet dénombrable de variables (appelées $λ$-variables) $\cal{V}_ι =
\{x,y,z...\}$. L'ensemble de tous les $λ$-termes est généré par la grammaire
||bnf|| suivante.
\Caml(
let _ = sidenote
  << $t,u ::= x \| \t("λx t") \| \t("t u")$ >>
  << $x ∈ \cal{V}_ι$ >>
)
Un terme de la forme $\t("λx t")$ est appelé abstraction (ou $λ$-abstractions)
et un terme de la forme $\t("t u")$ est appelé application. Le langage que
nous considérons dans cette thèse est en fait exprimé sous la forme d'une
machine abstraite comprenant quatre catégories syntaxiques (valeurs, termes,
piles et processus) générées par la grammaire ||bnf|| suivante.
\Caml(
let _ = large_bnfs
  [ ( << $(Λ_ι)$ >>
    , << $v, w$ >>
    , << $\v("x") \| \v("λx t") \| \v("Ck[v]") \|
          \v("{(li = vi) i∈I}") \| \v("□")$ >> )
  ; ( << $(Λ)$ >>
    , << $t, u$ >>
    , << $\t("a") \| \t("v") \| \t("t u") \| \t("μα t") \| \t("[π]t")
         \| \t("v.lk") \| \t("[v | (Ci[xi] → ti) i∈I]") \| \t("Y(t, v)")
         \| \t("R(v,t)") \| \t("δ(v,w)") $ >> )
  ; ( << $(Π)$ >>
    , << $π, ρ$ >>
    , << $\s("ε") \| \s("α") \| \s("v·π") \| \s("[t]π")$ >> )
  ; ( << $(Λ × Π)$ >>
    , << $p, q$ >>
    , << $\p("t ∗ π")$ >> ) ]
)
Let termes et valeurs forment une variante du \lmcalc() \cite("Parigot1992"),
enrichit avec des éléments des langages à la ML (enregistrements et variants).
Les valeurs de la forme $\v("Ck[v]")$ (avec $k ∈ \bbN$) correspondent à des
variants (ou constructeurs). Un filtrage par motif peut être effectué sur les
variants avec la syntaxe $\t("[v | (Ci[xi] → ti) i∈I]")$, où le motif
$\v("Ci[xi]")$ est associés au terme $t_i$ pour tout $i$ dans
$I ⊆_{fin} \bbN$. D'une manière similaire, les valeurs de la forme
$\v("{(li = vi) i∈I}")$ correspondent à des enregistrements, qui sont des
n-uplets avec des composantes nommées. L'opération de projection $\t("v.lk")$
peut être utilisée pour accéder à la valeur stockées sous le label $l_k$ dans
$v$.

Les processus forment l'état interne de notre machine abstraite. On peut en
fait voir un processus comme un terme, placé dans un contexte d'évaluation
représenté par une pile. Intuitivement, la pile $π$ du processus $\p("t ∗ π")$
contient les paramètres qui seront fournit à $t$. Comme on est en appel par
valeur, les piles stockent également les fonctions durant l'évaluation de
leurs arguments. C'est pourquoi on a besoin de piles de la forme $\s("[t]π")$.
La sémantique opérationnelle de notre langage est donnée par la relation
$({≻})$ définie sur les processus en utilisant les règles de réduction
suivantes.
\Caml(
  let _ =
    let line p1 p2 = (<<$\p(p1)$>>, <<$\p(p2)$>>, []) in
    let linec p1 p2 =
      (<<$\p(p1)$>>, <<$\p(p2)$>>, <<si $v ∉ \cal{V}_ι ∪ \{\v("□")\}$>>)
    in
    let linek p1 p2 =
      (<<$\p(p1)$>>, <<$\p(p2)$>>, <<si $k∈I$>>)
    in
    reduction_def <<$≻$>>
      [ line  "t u ∗ π"                         "u ∗ [t]π"
      ; linec "v ∗ [t]π"                        "t ∗ v·π"
      ; line  "λx t ∗ v·π"                      "t[x ≔ v] ∗ π"
      ; line  "μα t ∗ π"                        "t[α ≔ π] ∗ π"
      ; line  "[ξ]t ∗ π"                        "t ∗ ξ"
      ; linek "{(li = vi) i∈I}.lk ∗ π"          "vk ∗ π"
      ; linek "[Ck[v] | (Ci[xi] → ti) i∈I] ∗ π" "ti[xi≔v] ∗ π"
      ; line  "Y(t,v) ∗ π"                      "t (λx Y(t,x)) v ∗ π"
      ; line  "R({(li = vi) i∈I}, u) ∗ π"       "u ∗ π"
      ; line  "□ ∗ [t]π"                        "□ ∗ π"
      ; line  "□ ∗ v·π"                         "□ ∗ π"
      ; line  "[□ | (Ci[xi] → ti) i∈I] ∗ π"     "□ ∗ π"
      ; line  "□.lk ∗ π"                        "□ ∗ π" ]
)
Les trois premières règles sont celles qui prennent en charge la
$β$-réduction, c'est à dire l'évaluation standard des termes du $λ$-calcul.
Quand la machine abstraite rencontre une application, la fonction est
stockée sur la pile jusqu'à ce que son argument ait été complètement évalué.
Une fois l'argument calculé, un valeur fait face à la pile contenant la
fonction, on peut donc utiliser la second règle pour mettre la fonction en
position d'évaluation et son argument en position d'argument, prêt à être
consommé dés que la fonction se sera évalué en une $λ$-abstraction. À ce
moment là, on pourra réaliser une substitution sans capture en utilisant la
troisième règle, pour que l'application prenne effet. Le but des règles
suivantes est de prendre en charge l'évaluation des programmes formés avec
les autres constructeurs du langage (effets, enregistrements, variants,
récursion).
\end{env}

-<

-> Chapitre 3, équivalence observationnelle

\begin{env}(fun env -> hyphenate_fr env)
Dans ce chapitre, on introduit une relation d'équivalence sur les termes du
langage. Deux termes sont considérés équivalent si et seulement si ils ont le
même comportement observable en terme de calcul. Des propriétés générales sont
ensuite obtenues pour toute relation d'équivalence satisfaisant certaines
contraintes. Ces propriétés sont essentielles pour la définition de la
sémantique de réalisabilité dans les chapitres suivants. De plus, elles nous
permettent d'implanter une procédure partielle de décision pour l'équivalence
de programmes.

L'idée principale de ce chapitre est de considérer une forme d'équivalence
observationnelle. En d'autre termes, deux programmes seront considérés
équivalent dés lors qu'ils ont le même comportement observable dans tous
les contextes d'évaluation. Ici, on observera simplement, pour chaque pile,
si le processus formé calcule une valeur ou produit une erreur (ou ne termine
pas). On quantifiera également sur toutes les substitutions pour les variables
libres, de manière à pouvoir comparer des termes ouverts. La relation
$({≡}_{≻}) ⊆ {Λ×Λ}$ est donc définie comme suit.
$$ ({≡}_{≻}) = \{(t, u) \| ∀{π∈Π}, ∀{ρ∈\cal{S}},
     {{\p{tρ∗π}} {⇓}_{≻}} ⇔ {{\p{uρ∗π}} {⇓}_{≻}}\} $$
\end{env}

-<

-> Chapitre 4, système de type et sémantique

\begin{env}(fun env -> hyphenate_fr env)
Dans ce chapitre, on présente un nouveau système de type, qui se distingue
grâce à une notion d'équivalence de programme embarquée. Elle permet de
spécifier des propriétés équationnelles de programmes, qui sont ensuite
prouvées par des raisonnements équationnels sur les programmes. Nos types
sont interprétés en utilisant des techniques standard de la réalisabilité
classique, qui nous permettent de donner une justification sémantique à nos
règles de typage.

L'interprétation des types est définie inductivement, de manière usuelle. Il
faut quand même remarquer que, du fait de l'appel par valeur, l'interprétation
du type des fonctions requiert trois niveaux d'interprétation (valeurs, piles,
termes) liés par orthogonalité. Plus précisément, on définira l'interprétation
$\vs{A}$ d'un type comme l'ensemble de ses valeurs, et on obtiendra ensuite
par orthogonalité un ensemble de piles $\ss{A}$, puis un ensemble de termes
$\ts{A}$ de la manière suivante.
$$
  \ss{A} = \{π∈Π \| ∀v∈\vs{A}, \p{v ∗ π} {⇓}_{≻}\}
  \hspace(2.0)
  \ts{A} = \{t∈Λ \| ∀π∈\ss{A}, \p{t ∗ π} {⇓}_{≻}\}
$$

En particulier, le type restriction, dénotant une conjonction sémantique
sans contenu algorithmique, sera interprété comme $\vs{A∧t≡u} = \vs{A}$ si
on a $t ≡ u$ en accord avec la section précédente. Sinon, on prendra
$\vs{A∧t≡u} = ⟦⊥⟧$, c'est à dire la même interprétation que le type vide
$⊥$.
\end{env}

-<

-> Chapitre 5, restriction aux valeurs

\begin{env}(fun env -> hyphenate_fr env)
Dans ce chapitre, nous considérons l'encodage des types dépendants, qui sont
une forme de quantification typée dans notre système. Cependant,
l'expressivité de ces derniers est considérablement limitée par la restriction
aux valeurs. Pour résoudre ce problème, on introduit dans le système la notion
de //restriction aux valeurs sémantique//, qui permet au système d'accepter
bien plus de programmes. Obtenir un modèle justifiant la //restriction aux
valeurs sémantique// nécessite de changer à la fois la sémantique
opérationnelle et la définition de l'équivalence de programmes.

L'idée ici est de considérer qu'un terme $t$ est une valeur, si il existe
une valeur $v$ telle que $t ≡ v$. On pourra donc donner des règles de typage
relâchées, plus générales, qui auront une prémisse de la forme $Ξ ⊢ t ≡ v$.
Pour rendre notre modèle de réalisabilité compatible avec cette idée, il est
absolument nécessaire que les différents niveaux d'interprétation des types
satisfassent la relation suivante.
$$ {v ∈ \ts{A}} ⇒ {v ∈ \vs{A}} $$
En d'autre termes, si une valeur est présente dans l'interprétation d'un type
au niveau des termes, alors elle était déjà présente au niveau des valeurs.
Plus précisément, on demandera à ce que l'opération $\vs{A} ↦ \ts{A}$, qui
peut être vue comme une forme de complétion, n'introduise pas de nouvelles
valeurs.

Bien que cette propriété soit naturelle, elle n'est pas satisfaite en général
dans les modèles de réalisabilité classique (en appel par valeurs). La
définition d'un modèle ayant cette propriété est le résultat central de cette
thèse \cite("Lepigre2016"). Il est obtenu en étendant la syntaxe des termes
avec une opération permettant de tester des équivalences durant la réduction
de la machine abstraite.
\end{env}

-<

-> Chapitre 6, sous-typage

\begin{env}(fun env -> hyphenate_fr env)
Dans ce chapitre, on reformule la définition de notre système de type pour
inclure du sous-typage. L'idée principale est de transformer les règles de
typage qui n'ont pas de contenu algorithmique en règles de sous-typage. En
particulier, les quantificateurs, points fixes, appartenance et égalités
seront gérés au sein du sous-typage.

Dans le cadre de cette thèse, le sous-typage à deux intérêts principaux. En
premier lieux, il permet de donner un formulation du système qui est dirigée
par la syntaxe. En d'autre termes, une et une seule règle de typage peut
être appliquée pour un terme donné (peu importe le type correspondant), et
une et une seule règle de sous-typage peut être appliquée étant donné deux
types (modulo quelques subtilités). Il est en fait surprenant qu'on puisse
obtenir un ensemble de règles aussi satisfaisant pour une implantation,
malgré la très probable non décidabilité du typage et du sous-typage dans
notre système (c'est une extension de System F \cite("Wells1999")).

Sur le plan technique, nous considérons une notion de sous-typage bien
particulière (appelé sous-typage pointé) de la forme $t ∈ A ⊂ B$, et nous
faisons appel à des opérateurs de choix inspirés des travaux de Hilbert
(voir \cite("Lepigre2017")).
\end{env}

-<

-> Chapitre 7, programmes et preuves

\begin{env}(fun env -> hyphenate_fr env)
Dans ce dernier chapitre, nous considérons des exemples de programmes et de
preuves qui peuvent être écrits et manipulés par le prototype que nous avons
implanté. Cet ensemble restreint d'exemples n'a pas pour but de présenter le
système de manière exhaustive. Ils visent seulement à démontrer l'expressivité
du système, à travers une sélection d'exemples. Tous les exemples données dans
ce chapitre ont été vérifiés par notre prototype à la production de ce
document. Ils sont donc acceptés par notre implémentation sans qu'aucune
modification soit nécessaire.

Une partie des exemples considérés concernent les listes, avec certains de
leurs sous-types. En particulier, on considère le type des vecteurs (listes
de taille fixée) et les listes triées. On démontre ainsi, par exemple, qu'il
est possible de refléter par le typage qu'une fonction de tri (ici le tri par
insertion) transforme une liste en une liste triée.

Pour finir le chapitre, on considère quelque exemples utilisant la logique
classique. En particulier, on définit un programme qui est en fait extrait
de la preuve classique d'un lemme sur les listes infinies d'entiers (ou
« stream »). On définit ainsi une fonction qui, étant donné une liste
infinie d'entiers, retourne une sous-liste infinie de nombre pairs, ou une
sous-liste infinie de nombres impairs. Il n'est évidemment pas possible
d'écrire un tel programme hors d'un cadre classique.
\end{env}

-<
