\Caml(
let take n l =
  let rec take n l acc =
    match n, l with
    | 0, l     -> List.rev acc
    | n, x::xs -> take (n-1) xs (x :: acc)
    | _        -> l
  in take n l []

let rec drop n l =
  match n, l with
  | 0, l    -> l
  | n, []   -> l
  | n, x::l -> drop (n-1) l

let link url c =
  let link_begin = [bB (fun _->[Marker (BeginLink (Extern url))])] in
  let link_end   = [bB (fun _->[Marker EndLink])] in
  link_begin @ c @ link_end

let website url = link url [tT url]

let two_cols ls =
  let l = List.length ls in
  let h = l / 2 + (l mod 2) in
  let c1 = take h ls in
  let c2 = drop h ls in
  let c2 = if List.length c2 < h then c2 @ [[[];[];[]]] else c2 in
  let rec zip c1 c2 acc =
    match c1, c2 with
    | []    , []     -> List.rev acc
    | x1::c1, x2::c2 -> zip c1 c2 ((x1 @ x2) :: acc)
    | _              -> assert false
  in
  zip c1 c2 []

let _ =
  let pnum i = if i < 9 || i > 162 then "" else string_of_int i in
  DefaultFormat.sprint_page_number := pnum

module type Env =
  sig
    val do_begin_env : unit -> unit
    val do_end_env : unit -> unit
  end

let my_theorem_counter = "mytheorem"
let make_theorem : string -> (module Env) = fun name ->
  let module A =
    struct
      let refType = name
      let counter = my_theorem_counter
      let counterLevel = 3
      let display num = bold [tT (name ^ " " ^ num ^ "."); (tT " ")]
    end
  in (module Make_theorem( A ))

module Env_def = (val make_theorem "Definition")
module Env_rem = (val make_theorem "Remark")
module Env_lem = (val make_theorem "Lemma")
module Env_thm = (val make_theorem "Theorem")
module Env_cor = (val make_theorem "Corollary")
module Env_clm = (val make_theorem "Claim")

let defRef x = <<Definition \generalRef(my_theorem_counter)(x)>>
let remRef x = <<Remark \generalRef(my_theorem_counter)(x)>>
let lemRef x = <<Lemma \generalRef(my_theorem_counter)(x)>>
let thmRef x = <<Theorem \generalRef(my_theorem_counter)(x)>>
let corRef x = <<Corollary \generalRef(my_theorem_counter)(x)>>
let clmRef x = <<Claim \generalRef(my_theorem_counter)(x)>>
let figRef x = <<Figure \generalRef("figure")(x)>>

let definition = defRef
let remark     = remRef
let lemma      = lemRef
let theorem    = thmRef
let corollary  = corRef

let rec build_list l =
  let sp = [tT ", "] in
  let nd = [tT " and "] in
  match l with
  | []          -> invalid_arg "Macros.slist"
  | x::[]       -> x
  | x::y::[]    -> x @ nd @ y
  | x::y::z::ls -> x @ sp @ build_list (y::z::ls)

let chapters l =
  (tT "Chapters ") :: build_list (List.map sectref l)

let lemmas l =
  (tT "Lemmas ") :: build_list (List.map (generalRef my_theorem_counter) l)

let theorems l =
  (tT "Theorems ") :: build_list (List.map (generalRef my_theorem_counter) l)

let figRefs l =
  (tT "Figures ") :: build_list (List.map (generalRef "figure") l)

let chapter l = (tT "Chapter ") :: sectref l
let section l = (tT "Section ") :: sectref l

let chapitre l = (tT "Chapitre ") :: sectref l

let tval : Typography.Maths.math list =
  let t env = Maths.glyphs "val" (Maths.change_fonts env env.font)  in
  [Maths.bin_invisible 5 (mathSpace (-0.8)) [Maths.Ordinary (Maths.node t)]]

let hyphenate_fr env =
  let hyphenate = DefaultFormat.hyphenate_dict "hyph-fr.hdict" in
  {env with hyphenate}

(* Stuff to add side note. *)
let sidenote text note =
  let environment env = {env with par_indent = []} in
  let pars a b c d e f g h =
    let pars = Patoline_Format.parameters a b c d e f g h in
    {pars with min_lines_before = 2 ; min_lines_after = 2}
  in
  let np = newPar D.structure ~environment Complete.normal pars in
  let contents env =
    let dr env =
      let size_box rs =
        let (x1, y1, x2, y2) = RawContent.bounding_box rs in 
        (x2 -. x1, y2 -. y1)
      in
      let pagew = env.normalMeasure in
      let text = Document.draw env text in
      let note = Document.draw env note in
      let (wtext, _) = size_box text in
      let (wnote, _) = size_box note in
      let xtext = (pagew -. wtext) /. 2.0 in
      let xnote = pagew -. wnote in
      let text = List.map (RawContent.translate xtext 0.0) text in
      let note = List.map (RawContent.translate xnote 0.0) note in
      let open Box in
      { drawing_min_width     = pagew
      ; drawing_nominal_width = pagew
      ; drawing_max_width     = pagew
      ; drawing_width_fixed   = true
      ; drawing_adjust_before = false
      ; drawing_y0            = 0.0
      ; drawing_y1            = 2.0
      ; drawing_badness       = (fun _ -> 0.0)
      ; drawing_break_badness = infinity
      ; drawing_states        = []
      ; drawing_contents      = (fun _ -> text @ note) }
    in
    [bB (fun env -> [Drawing (dr env)])]
  in np [C contents]

(* Reduction relation definition. *)
let reduction_def ?pad:(pad = 6.0) sym lines =
  let lbef = 2 + (List.length lines) - 1 in (* HACK FIXME *)
  let laft = 2 in
  let environment env = {env with par_indent = []} in
  let pars a b c d e f g h =
    let pars = Patoline_Format.parameters a b c d e f g h in
    {pars with min_lines_before = lbef ; min_lines_after = laft}
  in
  let np = newPar D.structure ~environment Complete.normal pars in
  let contents env =
    let dr env =
      let pagew = env.normalMeasure in
      let sep = env.normalLead in
      let size_box rs =
        let (x1, y1, x2, y2) = RawContent.bounding_box rs in 
        (x2 -. x1, y2 -. y1)
      in
      let sym = Document.draw env sym in
      let (wsym,_) = size_box sym in
      let sym =
        List.map (RawContent.translate ((pagew -. wsym) /. 2.0) 0.0) sym
      in
      let line (l,r,n) =
        let l = Document.draw env l in
        let r = Document.draw env r in
        let n = Document.draw env n in
        let (wl,_) = size_box l in
        (*
        let (wr,_) = size_box r in
        *)
        let (wn,_) = size_box n in
        let l =
          let y = ((pagew -. wsym) /. 2.0) -. wl -. pad in 
          List.map (RawContent.translate y 0.0) l
        in
        let r =
          let y = ((pagew +. wsym) /. 2.0) +. pad in
          List.map (RawContent.translate y 0.0) r
        in
        let n = List.map (RawContent.translate (pagew -. wn) 0.0) n in
        l @ sym @ r @ n
      in
      let combine acc l =
        (line l) @ (List.map (RawContent.translate 0.0 sep) acc)
      in
      let lines = List.fold_left combine [] lines in
      let (_,y0,_,y1) = bounding_box_full lines in
      { drawing_min_width     = pagew
      ; drawing_nominal_width = pagew
      ; drawing_max_width     = pagew
      ; drawing_width_fixed   = true
      ; drawing_adjust_before = false
      ; drawing_y0            = y0
      ; drawing_y1            = y1
      ; drawing_badness       = (fun _ -> 0.0)
      ; drawing_break_badness = infinity
      ; drawing_states        = []
      ; drawing_contents      = (fun _ -> lines) }
    in
    [bB (fun env -> [Drawing (dr env)])]
  in np [C contents]

(* BNF grammars. *)
let bnfs lines =
  let lbef = 2 + (List.length lines) - 1 in (* HACK FIXME *)
  let laft = 2 in
  let pad = 2.0 in
  let environment env = {env with par_indent = []} in
  let pars a b c d e f g h =
    let pars = Patoline_Format.parameters a b c d e f g h in
    {pars with min_lines_before = lbef ; min_lines_after = laft}
  in
  let np = newPar D.structure ~environment Complete.normal pars in
  let contents env =
    let dr env =
      let pagew = env.normalMeasure in
      let sep = env.normalLead in
      let size_box rs =
        let (x1, y1, x2, y2) = RawContent.bounding_box rs in 
        (x2 -. x1, y2 -. y1)
      in
      let sym = Document.draw env <<$::=$>> in
      let (wsym,_) = size_box sym in
      let fnmax (ml,mr) (_,l,r,_) =
        let (wl,_) = size_box (Document.draw env l) in
        let (wr,_) = size_box (Document.draw env r) in
        (max ml wl, max mr wr)
      in
      let (maxl, maxr) = List.fold_left fnmax (0.0, 0.0) lines in
      let left = (pagew -. maxl -.maxr -. 2.0 *. pad -. wsym) /. 2.0 in
      let sym =
        List.map (RawContent.translate (left +. maxl +. pad) 0.0) sym
      in
      let line (s,l,r,n) =
        let s = Document.draw env s in
        let l = Document.draw env l in
        let r = Document.draw env r in
        let n = Document.draw env n in
        let (wl,_) = size_box l in
        (*
        let (wr,_) = size_box r in
        *)
        let (wn,_) = size_box n in
        let l =
          let y = left +. maxl -. wl in
          List.map (RawContent.translate y 0.0) l
        in
        let r =
          let y = left +. maxl +. wsym +. 2.0 *. pad in
          List.map (RawContent.translate y 0.0) r
        in
        let n = List.map (RawContent.translate (pagew -. wn) 0.0) n in
        s @ l @ (if l = [] then [] else sym) @ r @ n
      in
      let combine acc l =
        (line l) @ (List.map (RawContent.translate 0.0 sep) acc)
      in
      let lines = List.fold_left combine [] lines in
      let (_,y0,_,y1) = bounding_box_full lines in
      { drawing_min_width     = pagew
      ; drawing_nominal_width = pagew
      ; drawing_max_width     = pagew
      ; drawing_width_fixed   = true
      ; drawing_adjust_before = false
      ; drawing_y0            = y0
      ; drawing_y1            = y1
      ; drawing_badness       = (fun _ -> 0.0)
      ; drawing_break_badness = infinity
      ; drawing_states        = []
      ; drawing_contents      = (fun _ -> lines) }
    in
    [bB (fun env -> [Drawing (dr env)])]
  in np [C contents]

let large_bnfs lines =
  let lbef = 2 + (List.length lines) - 1 in (* HACK FIXME *)
  let laft = 2 in
  let pad = 2.0 in
  let environment env = {env with par_indent = []} in
  let pars a b c d e f g h =
    let pars = Patoline_Format.parameters a b c d e f g h in
    {pars with min_lines_before = lbef ; min_lines_after = laft}
  in
  let np = newPar D.structure ~environment Complete.normal pars in
  let contents env =
    let dr env =
      let pagew = env.normalMeasure in
      let sep = env.normalLead in
      let size_box rs =
        let (x1, y1, x2, y2) = RawContent.bounding_box rs in 
        (x2 -. x1, y2 -. y1)
      in
      let sym = Document.draw env <<$::=$>> in
      let (wsym,_) = size_box sym in
      let fnmax (ml,mr) (_,l,r) =
        let (wl,_) = size_box (Document.draw env l) in
        let (wr,_) = size_box (Document.draw env r) in
        (max ml wl, max mr wr)
      in
      let (maxl, maxr) = List.fold_left fnmax (0.0, 0.0) lines in
      let left = pagew -. maxl -.maxr -. 2.0 *. pad -. wsym in
      let sym =
        List.map (RawContent.translate (left +. maxl +. pad) 0.0) sym
      in
      let line (s,l,r) =
        let s = Document.draw env s in
        let l = Document.draw env l in
        let r = Document.draw env r in
        let (wl,_) = size_box l in
        (*
        let (wr,_) = size_box r in
        *)
        let l =
          let y = left +. maxl -. wl in
          List.map (RawContent.translate y 0.0) l
        in
        let r =
          let y = left +. maxl +. wsym +. 2.0 *. pad in
          List.map (RawContent.translate y 0.0) r
        in
        s @ l @ (if l = [] then [] else sym) @ r
      in
      let combine acc l =
        (line l) @ (List.map (RawContent.translate 0.0 sep) acc)
      in
      let lines = List.fold_left combine [] lines in
      let (_,y0,_,y1) = bounding_box_full lines in
      { drawing_min_width     = pagew
      ; drawing_nominal_width = pagew
      ; drawing_max_width     = pagew
      ; drawing_width_fixed   = true
      ; drawing_adjust_before = false
      ; drawing_y0            = y0
      ; drawing_y1            = y1
      ; drawing_badness       = (fun _ -> 0.0)
      ; drawing_break_badness = infinity
      ; drawing_states        = []
      ; drawing_contents      = (fun _ -> lines) }
    in
    [bB (fun env -> [Drawing (dr env)])]
  in np [C contents]


(* Bibliography stuff. *)
let biblio = Minibib.from_name "biblio"

let mcite : string list -> content list = fun l ->
  let act l =
    let build k = emph [tT (Minibib.key_spacing k)] in
    let rec generate = function
      | []    -> invalid_arg "mcite"
      | [k]   -> build k
      | k::ks -> build k @ [tT ", "] @ generate ks
    in
    [tT "["] @ generate l @ [tT "]"]
  in
  Minibib.cite biblio act l

let cite : string -> content list = fun k ->
  mcite [k]

let citen : string -> string -> content list = fun k n ->
  let act l =
    let k = Minibib.key_spacing (List.hd l) in
    [tT "["] @ emph [tT (String.concat ", " [k;n])] @ [tT "]"]
  in
  Minibib.cite biblio act [k]

let scale : float -> Document.environment -> Document.environment =
  fun f e -> {e with size = f *. e.size}

(* A majestic scissors symbol built with my onw hands. *)
let raw_scissors : raw list =
  let mirror =
    let mat =
      [| [| 1.0 ;  0.0 ; 0.0 |]
      ;  [| 0.0 ; -1.0 ; 0.0 |]
      ;  [| 0.0 ;  0.0 ; 1.0 |] |]
    in
    affine mat
  in
  let pp = {default_path_param with lineWidth = 0.4} in
  let pp_fillb =
    { default_path_param with close = true; fillColor = Some Color.black }
  in
  let pp_fillw = {pp_fillb with fillColor = Some Color.white} in
  let hd = Path (pp, [circle 0.8]) in
  let hole = Path (pp_fillw, [circle 0.3]) in
  let br =
    let x = [|0.0; 8.0; 1.0|] in
    let y = [|0.0; 0.0; 0.9|] in
    (x,y)
  in
  let br = Path (pp_fillb, [[|br|]]) in
  let br = translate 0.0 (-1.0) br in
  let br = [br; hd] in
  let origin_x c =
    let (x0,_,_,_) = bounding_box_full [c] in
    translate (-.x0) 0.0 c
  in
  let br1 = rotate (-0.3) (List.map (translate (-0.5) 1.7) br) in
  let br2 = rotate 0.3 [mirror br] in
  let cs =
    [ origin_x br1 ; origin_x br2
    ; translate 1.5 0.9 (origin_x hole) ]
  in
  let (x0,y0,x1,y1) = bounding_box_full cs in
  let w = x1 -. x0 in
  let cs = List.map (resize (1.0 /. w)) cs in
  let (x0,y0,x1,y1) = bounding_box_full cs in
  List.map (translate (-.x0) (-.y0)) cs

let scissors_drawing : Document.environment -> drawingBox = fun env ->
  let cont _ = List.map (resize 3.2) raw_scissors in
  drawing ~offset:(-0.2) (cont env)

let scissors : math list =
  let glue w =
    { drawing_min_width     = w
    ; drawing_max_width     = w
    ; drawing_nominal_width = w
    ; drawing_width_fixed   = true
    ; drawing_adjust_before = false
    ; drawing_y0            = infinity
    ; drawing_y1            = -.infinity
    ; drawing_contents      = (fun _ -> [])
    ; drawing_break_badness = 0.0
    ; drawing_states        = []
    ; drawing_badness       = knuth_h_badness w }
  in
  [Maths.Scope (fun env menv ->
    [ Maths.Glue (glue 1.2)
    ; Maths.Glue (scissors_drawing env)
    ; Maths.Glue (glue 0.4) ]
  )]

(* PML verbatim environments. *)
module OCamlVerbatim : sig
    val verbs_MyOCaml : string option -> string list -> unit
    val verbatim : string -> content list
  end = struct
    let pad = 2.0

    let keywords =
      [ "type" ; "val" ; "def" ; "fun" ; "if" ; "then" ; "else"
      ; "let" ; "in" ; "rec" ; "match" ; "case" ; "with" ; "of"
      ; "function" ]

    let separators = ["("; ")"; "["; "]"]

    let symbols  =
      let simple_verb : string -> string * content =
         fun s -> (s, Verbatim.symbol s)
      in
      [ simple_verb "→" ]

    let verbs_MyOCaml fn lines =
      let open Verbatim in
      lines_to_file lines fn;
      let params = {keywords ; separators ; symbols} in
      let params' = {keywords=[] ; separators ; symbols} in
      let build_line l =
        hspace pad @
        if String.length l > 2 && l.[0] = '(' && l.[1] = '*' then
          let build_word = handle_word params' in
          color Color.grey (handle_spaces params' build_word l)
        else
          let build_word = handle_word params in
          handle_spaces params build_word l
      in
      line_per_line D.structure build_line lines
  
    let verbatim =
      let open Verbatim in
      verb_text (handle_word {keywords = []; separators; symbols})
  end

(* PML verbatim environments. *)
module PMLVerbatim : sig
    val verbs_PML : string option -> string list -> unit
    val verbatim : string -> content list
  end = struct
    let pad = 2.0

    let keywords =
      [ "type" ; "val" ; "def" ; "fun" ; "if" ; "then" ; "else"
      ; "let" ; "in" ; "rec" ; "corec" ; "match" ; "case" ; "with"
      ; "of" ; "save" ; "restore" ; "deduce" ; "show" ; "using"
      ; "fix" ; "true" ; "false" ; "include" ]

    let separators = ["("; ")"; "["; "]"]

    let symbols  =
      let simple_verb : string -> string * content =
         fun s -> (s, Verbatim.symbol s)
      in
      let scissors =
        bB (fun env -> [Drawing (scissors_drawing env)])
      in
      let langle =
        let s = [Maths.Ordinary (Maths.node (Maths.glyphs "⟨"))] in
        bB (fun env -> Maths.draw [env] s)
      in
      let rangle =
        let s = [Maths.Ordinary (Maths.node (Maths.glyphs "⟩"))] in
        bB (fun env -> Maths.draw [env] s)
      in
      [ simple_verb "∀"
      ; simple_verb "Λ"
      ; simple_verb "λ"
      ; simple_verb "→"
      ; simple_verb "↓"
      ; simple_verb "∃"
      ; simple_verb "≡"
      ; simple_verb "∈"
      ; simple_verb "⇒"
      ; simple_verb "μ"
      ; simple_verb "ν"
      ; simple_verb "ι"
      ; simple_verb "ο"
      ; simple_verb "τ"
      ; simple_verb "⋯"
      ; ("<" , langle)
      ; (">" , rangle)
      ; ("8<", scissors)
      ; ("✂" , scissors) ]

    let verbs_PML fn lines =
      let open Verbatim in
      lines_to_file lines fn;
      let params = {keywords ; separators ; symbols} in
      let params' = {keywords=[] ; separators ; symbols} in
      let build_line l =
        hspace pad @
        if String.length l > 2 && l.[0] = '/' && l.[1] = '/' then
          let build_word = handle_word params' in
          color Color.grey (handle_spaces params' build_word l)
        else
          let build_word = handle_word params in
          handle_spaces params build_word l
      in
      line_per_line D.structure build_line lines
  
    let verbatim =
      let open Verbatim in
      (*
      let build = handle_spaces (handle_word {keywords ; symbols}) in
      verb_text (handle_spaces build)
      *)
      verb_text (handle_word {keywords = []; separators; symbols})
  end

let verbs_OCaml fn lines =
  let open Verbatim in
  lines_to_file lines fn;
  let extra = [] in (* ["throw"; "callcc"] in *)
  let keywords = extra @ param_OCaml.keywords in
  let param_OCaml = { param_OCaml with keywords } in
  let param_OCaml' = { param_OCaml with keywords = [] } in
  let build_line l =
    hspace 2.0 @
    if String.length l > 2 && l.[0] = '(' && l.[1] = '*' then
      let build_word = handle_word param_OCaml' in
      color Color.grey (handle_spaces param_OCaml' build_word l)
    else
      let build_word = handle_word param_OCaml in
      handle_spaces param_OCaml build_word l
  in
  line_per_line D.structure build_line lines

let lmcalc =
  let lm = [Maths.Ordinary (Maths.node (Maths.glyphs "λμ"))] in
  << $\lm$-calculus >>

let br, mbr =
  let dr1 env =
    { empty_drawing_box with drawing_min_width = 0.0
    ; drawing_max_width = env.normalMeasure
    ; drawing_nominal_width = 0.0 }
  in
  let dr2 env =
    { empty_drawing_box with drawing_min_width = 0.0
    ; drawing_max_width = 0.0 ; drawing_nominal_width = 0.0
    ; drawing_badness = (fun _ -> infinity) }
  in
  let br =
    let open Box in
    [bB (fun env -> [Glue (dr1 env); Glue (dr2 env)])]
  in
  let mbr =
    let open Maths in
    [Scope (fun env _ -> [Glue (dr1 env); Glue (dr2 env)])]
  in (br, mbr)

(* Convenient function to build figures. *)
let dr rs env =
  let rs = rs env in
  let wall = env.normalMeasure -. 6.0 in
  let size_box rs =
    let (x1, y1, x2, y2) = bounding_box rs in 
    (x2 -. x1, y2 -. y1)
  in
  let trs d = RawContent.translate d 0.0 in
  let draw_line ls =
    match ls with
    | [e1]         -> let (w1, h1) = size_box e1 in
                      let d1 = (wall -. w1) /. 2.0 in
                      let all = List.map (trs d1) e1 in
                      (h1, all)
    | [e1; e2]     -> let (w1, h1) = size_box e1 in
                      let (w2, h2) = size_box e2 in
                      let d1 = 0.0 in
                      let d2 = wall -. w2 in
                      let all =
                        List.map (trs d1) e1 @ List.map (trs d2) e2
                      in
                      (max h1 h2, all)
    | [e1; e2; e3] -> let (w1, h1) = size_box e1 in
                      let (w2, h2) = size_box e2 in
                      let (w3, h3) = size_box e3 in
                      let d1 = 0.0 in
                      let d3 = wall -. w3 in
                      (* let d2 = (wall -. w2) /. 2.0 in *)
                      let d2 = w1 +. (d3 -. (w1 +. w2)) /. 2.0 in
                      let all =
                        List.map (trs d1) e1 @ List.map (trs d2) e2 @
                        List.map (trs d3) e3
                      in
                      (max h1 (max h2 h3), all)
    | _            -> assert false
  in
  let ls = List.map draw_line rs in
  let gather acc (h,l) =
    let h = h +. 6.0 in
    (List.map (RawContent.translate 0.0 h) acc) @ l
  in
  let cs = List.fold_left gather [] ls in
  let (x1, y1, x2, y2) = bounding_box cs in
  let border =
    let pad = 3.0 in
    let r = rectangle (x1 -. pad, y1 -. pad) (x2 +. pad, y2 +. pad) in
    [Path(default_path_param, [r])]
  in
  let all = (List.fold_left gather [] ls @ border) in
  let (x0,y0,x1,y1) = RawContent.bounding_box all in
  let all = List.map (RawContent.translate (-.x0) (-.y0)) all in
  drawing all

let tabular_layout ratio vsep lines =
  let lbef = 2 + (List.length lines) - 1 in (* HACK FIXME *)
  let laft = 2 in
  let environment env = {env with par_indent = []} in
  let pars a b c d e f g h =
    let pars = Patoline_Format.parameters a b c d e f g h in
    {pars with min_lines_before = lbef ; min_lines_after = laft}
  in
  let np = newPar D.structure ~environment Complete.normal pars in
  let contents env =
    let dr env =
      let pagew = env.normalMeasure in
      let pad = ((1.0 -. ratio) *. env.normalMeasure) /. 2.0 in
      let sep = env.normalLead +. vsep in
      let size_box rs =
        let (x1, y1, x2, y2) = RawContent.bounding_box rs in 
        (x2 -. x1, y2 -. y1)
      in
      let fn e =
        let rs = Document.draw env e in
        let (w,_) = size_box rs in
        (w, rs)
      in
      let lines = List.map (List.map fn) lines in
      let line cs =
        let totw = List.fold_left (fun acc (w,_) -> acc +. w) 0.0 cs in
        let pagew = ratio *. pagew in
        let sepw = (pagew -. totw) /. (float_of_int (List.length cs - 1)) in
        match cs with
        | []         -> assert false
        | (wa,a)::cs ->
            let acc = List.map (RawContent.translate pad 0.0) a in
            let curw = pad +. wa in
            let fn (acc, curw) (w,rs) =
              let x = curw +. sepw in
              let rs = List.map (RawContent.translate x 0.0) rs in
              (acc @ rs, curw +. sepw +. w)
            in
            fst (List.fold_left fn (acc, curw) cs)
      in
      let combine acc l =
        (line l) @ (List.map (RawContent.translate 0.0 sep) acc)
      in
      let lines = List.fold_left combine [] lines in
      let (_,y0,_,y1) = bounding_box_full lines in
      { drawing_min_width     = pagew
      ; drawing_nominal_width = pagew
      ; drawing_max_width     = pagew
      ; drawing_width_fixed   = true
      ; drawing_adjust_before = false
      ; drawing_y0            = y0
      ; drawing_y1            = y1
      ; drawing_badness       = (fun _ -> 0.0)
      ; drawing_break_badness = infinity
      ; drawing_states        = []
      ; drawing_contents      = (fun _ -> lines) }
    in
    [bB (fun env -> [Drawing (dr env)])]
  in np [C contents]

let todo = function
  | None     -> color red <<TODO (...) >>
  | Some txt -> color red (<<TODO (>> @ [tT txt] @ <<)>>)
)
