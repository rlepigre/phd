\Caml(

let link url c =
  let link_begin = [bB (fun _->[Marker (BeginLink (Extern url))])] in
  let link_end   = [bB (fun _->[Marker EndLink])] in
  link_begin @ c @ link_end

let references bib =
  let open Minibib in

  let refs = entries (from_name bib) in

  let format_ref e =
    let key   = [tT "["] @ emph [tT (key_spacing e.key)] @ [tT "] "] in
    let key   = if e.url = "" then key else link e.url key in
    let title = emph [tT e.title] @ [tT ", "] in
    let authors =
      match e.authors with
      | []          -> assert false
      | a::[]       -> a
      | a::b::[]    -> a ^ " and " ^ b
      | a::b::c::[] -> a ^ ", " ^ b ^ " and " ^ c
      | a::b::c::ls -> a ^ ", " ^ b ^ ", " ^ c ^ " et al."
    in
    let auth  = [tT authors] in
    let data  =
      (*[tT e.notes; tT ", "; tT e.year ; tT "."]*)
      match e.notes with
      | "" -> [tT "."]
      | s  -> [tT (", " ^ s ^ ".")]
    in
    (color Color.gray key) @ title @ auth @ data
  in

  let coef = 1.0 in
 
  let line c =
    let environment : Document.environment -> Document.environment =
      fun env -> { env with par_indent = [] ; size = coef *. env.size }
    in
    newPar D.structure ~environment Complete.normal
      Patoline_Format.parameters c
  in
  List.iter line (List.map format_ref refs); []

)

\references("biblio")

